/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

public class Library {
    public static void main(String[] args) {
        int numRolls = 4;
        int[] newRolls = roll(numRolls);
        for (int i = 0; i < numRolls; i++) {
            System.out.println(newRolls[i]);
        }

        containsDuplicates(newRolls);

        double average = avg(newRolls);
        System.out.println(average);

        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };

        int[] lowestAvgArr = lowestAvg(weeklyMonthTemperatures);
        for (int i = 0; i < lowestAvgArr.length; i++) {
            System.out.println(lowestAvgArr[i]);
        }

        System.out.println("\n\nLAB03\n\n");
        analyze(weeklyMonthTemperatures);
        System.out.println("\n\n");

        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        tally(votes);
        String winner = tally(votes);
        System.out.println(winner + " received the most votes!");
    }


    public static int[] roll(int n) {
        int min = 1;
        int max = 6;

        int[] myRolls;
        myRolls = new int[n];
        for (int i = 0; i < n; i++) {
            myRolls[i] = (int) Math.floor(Math.random() * (max - min + 1) + min);
        }
        return myRolls;
    }

    public static boolean containsDuplicates(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] == arr[j]) {
                    System.out.println("true");
                    return true;
                }

            }
        }
        System.out.println("false");
        return false;
    }

    public static double avg(int[] arr) {
        double sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum = sum + arr[i];
        }
        return sum / arr.length;
    }

    public static int[] lowestAvg(int[][] arr) {
        double sum = 0;
        double average = 0;

        double firstSum = 0;
        double firstAvg = 0;

        int index1 = 0;

        int[] lowestAvgArr;
        for (int i = 0; i < arr[0].length; i++) {
            firstSum = firstSum + arr[0][i];
            firstAvg = firstSum / arr[0].length;
        }

        double lowestAverage = firstAvg;
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
                sum = sum + arr[i][j];

                average = sum / arr[i].length;
            }
            if (average < lowestAverage) {
                lowestAverage = average;
                index1 = i;

            }

            sum = 0;
            average = 0;
        }
        lowestAvgArr = arr[index1];
        return lowestAvgArr;
    }

    public static String analyze(int[][] arr) {
        int min = arr[0][0];
        int max = arr[0][0];
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
                if (min >= arr[i][j]) {
                    min = arr[i][j];
                } else if (max <= arr[i][j]) {
                    max = arr[i][j];
                }
            }
        }

        HashSet<Integer> set = new HashSet<Integer>();
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
                set.add(arr[i][j]);
            }
        }


        String str = "High : " + max + "\n" + "Low : " + min;
        for (int i = min; i < max; i++) {
            if (set.contains(i)) {
            } else {
                str = str.concat("\n" + "Never saw temperature: " + i);
            }
        }
        System.out.println(str);
        return str;
    }

    public static String tally(List<String> votes) {

        HashSet<String> set = new HashSet<String>();
        for (int i = 0; i < votes.size(); i++) {
            set.add(votes.get(i));
        }

        Object voters[];
        int counters[] = new int[set.size()];
        for (int i = 0; i < counters.length; i++) {
            counters[i] = 0;
        }

        voters = set.toArray();


        for (int i = 0; i < votes.size(); i++) {
            for (int j = 0; j < voters.length; j++) {
                if (votes.get(i) == voters[j]) {
                    counters[j]++;
                }
            }
        }

        int index = 0;
        int highestVote = 0;

        for (int i = 0; i < counters.length; i++) {
            if (highestVote < counters[i]) {
                index = i;
                highestVote = counters[i];
            }

        }

        String winner = voters[index].toString();
        return winner;
    }
}
